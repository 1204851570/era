;********************************************************************************************
;2019/8/14 作成 ロウ@TW夢子口上の人
;
;Licence  :ライセンスフリー(CC0)。
;
;グラフィック表示簡易化ライブラリ
;なんかややこしいグラフィック表示関連を簡単に表示できるようにまとめたもの。
;HTMLもどきだし、可読性悪いし、冗長なので「もう画像指定したら縦幅とか勝手に揃えろよ」っていうことで作りました。
;********************************************************************************************

;********************************************************************************************
;画像表示用関数
;これを呼べば画像の縦横計算とかややこしいことしないで画像を一枚表示できる
;横位置は左揃えの場合は左端から、右揃えの場合は右端から指定したピクセル数分間隔を空ける
;画像反転フラグは 1:横反転 2：盾反転 3:縦横反転
;********************************************************************************************
@画像表示(画像名, 表示位置, 縦位置, 横位置, 拡大比率 = 100, 自動改行 = 0, ボタン生成 = 0, VALUE = "", TITLE = "", マウスオーバー画像名 = "", 画像反転フラグ = 0)
#DIMS 画像名				;リソース名
#DIMS マウスオーバー画像名	;マウスオーバー時に表示する画像名 省略可
#DIMS 表示位置				;表示位置指定文字列
#DIM  縦位置				;ピクセル指定 内部でフォントサイズ基準のパーセンテージに変換する
#DIM  横位置				;上に同じ
#DIM  自動改行				;自動改行有無フラグ デフォルトはしない
#DIM  拡大比率				;パーセンテージ指定 指定しなければ100
#DIM  ボタン生成			;ボタンとして使用するか デフォルトはしない
#DIMS  VALUE				;ボタンのバリュー
#DIMS  TITLE				;マウスオーバー時に表示する文字列
#DIM  画像反転フラグ		;画像反転を行うかのフラグ
#DIMS  表示HTML
IF SPRITECREATED(画像名)
	表示HTML = 
	表示HTML += @"%画像表示位置HTML(表示位置)%"
	SIF GROUPMATCH(表示位置, "LEFT", "left", "左")
		表示HTML += @"%横位置HTML(横位置)%"
	SIF ボタン生成
		表示HTML += @"%ボタン生成HTML(VALUE, TITLE)%"
	表示HTML += @"%画像表示単独HTML(画像名, 縦位置, マウスオーバー画像名, 拡大比率, 画像反転フラグ)%"
	SIF ボタン生成
		表示HTML += @"</button>"
	SIF GROUPMATCH(表示位置, "RIGHT", "right", "右")
		表示HTML += @"%横位置HTML(横位置)%"
	DEBUGPRINTFORML %表示HTML%
	HTML_PRINT 表示HTML
	
	SIF 自動改行
		CALL ピクセル自動改行(縦位置 + SPRITEHEIGHT(画像名) * 拡大比率 / 100)
	行ずれ回数++
ELSE
	RETURN 0
ENDIF
RETURN 1

;********************************************************************************************
;画像セット関数
;並べて表示したい場合に、画像一斉表示関数と合わせて使用する
;横位置は指定したピクセル数分画像間の間隔を空ける
;********************************************************************************************
@画像セット(画像名, 縦位置, 画像間隔, 拡大比率 = 100, ボタン生成 = 0, VALUE = "", TITLE = "", マウスオーバー画像名 = "", 画像反転フラグ = 0)
#DIMS 画像名				;リソース名
#DIMS マウスオーバー画像名	;マウスオーバー時に表示する画像名 省略可
#DIMS 表示位置				;表示位置指定文字列
#DIM  縦位置				;ピクセル指定 内部でフォントサイズ基準のパーセンテージに変換する
#DIM  画像間隔				;ピクセル指定 内部でフォントサイズ基準のパーセンテージに変換する
#DIM  拡大比率				;パーセンテージ指定 指定しなければ100
#DIM  ボタン生成			;ボタンとして使用するか デフォルトはしない
#DIMS  VALUE				;ボタンのバリュー
#DIMS  TITLE				;マウスオーバー時に表示する文字列
#DIM  画像反転フラグ		;画像反転を行うかのフラグ
#DIMS  表示HTML
IF SPRITECREATED(画像名)
	SIF TEMP_HTML != ""
		TEMP_HTML += @"%横位置HTML(画像間隔)%"
	SIF ボタン生成
		TEMP_HTML += @"%ボタン生成HTML(VALUE, TITLE)%"
	TEMP_HTML += @"%画像表示単独HTML(画像名, 縦位置, マウスオーバー画像名, 拡大比率, 画像反転フラグ)%"
	SIF ボタン生成
		TEMP_HTML += @"</button>"
	LOCAL = 縦位置 + SPRITEHEIGHT(画像名) * 拡大比率 / 100
	SIF LOCAL > TEMP_HTML_MAX_HEIGHT
		TEMP_HTML_MAX_HEIGHT = LOCAL
ELSE
	RETURN 0
ENDIF
RETURN 1

;********************************************************************************************
;画像一斉表示関数
;並べて表示したい場合に、画像セット関数と合わせて使用する
;横位置は左揃えの場合は左端から、右揃えの場合は右端から指定したピクセル数分間隔を空ける
;********************************************************************************************
@画像一斉表示(表示位置, 横位置, 自動改行 = 0)
#DIMS 表示位置				;表示位置指定文字列

#DIM  横位置				;上に同じ
#DIM  自動改行				;自動改行有無フラグ デフォルトはしない
IF TEMP_HTML != ""
	TEMP_HTML = %画像表示位置HTML(表示位置)%%TEMP_HTML%
	SIF GROUPMATCH(表示位置, "LEFT", "left", "左")
		TEMP_HTML = %横位置HTML(横位置)%%TEMP_HTML%
	SIF GROUPMATCH(表示位置, "RIGHT", "right", "右")
		TEMP_HTML += @"%横位置HTML(横位置)%"
	DEBUGPRINTFORML %TEMP_HTML%
	HTML_PRINT TEMP_HTML
	
	SIF 自動改行
		CALL ピクセル自動改行(TEMP_HTML_MAX_HEIGHT)
	TEMP_HTML = 
	TEMP_HTML_MAX_HEIGHT = 0
	行ずれ回数++
ELSE
	RETURN 0
ENDIF
RETURN 1

;********************************************************************************************
;画像表示単独のHTML取得関数
;諸々の計算は内部でするので指定するのは画像だけにしたい
;拡大縮小したい場合を考えて一応拡大比率指定出来るように
;********************************************************************************************
@画像表示単独HTML(画像名, 縦位置, マウスオーバー画像名 = "", 拡大比率 = 100, 画像反転フラグ = 0)
#FUNCTIONS
#DIMS 画像名				;リソース名
#DIMS マウスオーバー画像名	;マウスオーバー時に表示する画像名 省略可
#DIM  拡大比率				;パーセンテージ指定 指定しなければ100
#DIM  画像縦幅				;ややこしいがフォントサイズ基準のパーセンテージ
#DIM  画像横幅				;上に同じ
#DIM  縦位置				;ピクセル指定 内部でフォントサイズ基準のパーセンテージに変換する
#DIM  画像反転フラグ		;画像反転を行うかのフラグ
SIF PPF == 0
	;１ピクセルがフォントサイズの何%であるかを10倍の値で取得する（精度向上のため）
	PPF = PIXEL_PERCENT_OF_FONTSIZE() ;どうせコンフィグ変えたら再起動なのだから、一度だけ計算する
IF SPRITECREATED(画像名)
	画像縦幅 = (SPRITEHEIGHT(画像名) * 拡大比率 / 100) * PPF / 10 * (GETBIT(画像反転フラグ, 1) ? -1 # 1 )
	画像横幅 = (SPRITEWIDTH(画像名) * 拡大比率 / 100) * PPF / 10 * (GETBIT(画像反転フラグ, 0) ? -1 # 1 )
	縦位置   = (縦位置 * PPF / 10) - (行ずれ回数 * 100) - (GETBIT(画像反転フラグ, 1) ? 画像縦幅/2 # 0 )
	LOCALS = <img src='%画像名%' \@ マウスオーバー画像名 != "" ? srcb='%マウスオーバー画像名%' # \@ height='{画像縦幅}' width='{画像横幅}' ypos='{縦位置}'>
	RETURNF LOCALS
ELSE
	PRINTFORML 画像リソースが見つかりません
	RETURNF @""
ENDIF

;********************************************************************************************
;1ピクセルで現在のフォントサイズの何%かを10倍の近似値で出力する関数
;ピクセル単位で考えたいので作成 いちいち計算したくないし小数無いのだから細かなズレは気にしない
;********************************************************************************************
@PIXEL_PERCENT_OF_FONTSIZE
#FUNCTION
RETURNF (1000 / GETCONFIG("一行の高さ")) + (1000 % GETCONFIG("一行の高さ") >= 5?1#0)

;********************************************************************************************
;位置揃え指定関数
;PタグがただのALIGNMENT指定用タグと化してるので分離
;戻り値としてＰタグの文字列を返す
;ARGS = 画像表示位置指定文字列
;********************************************************************************************
@画像表示位置HTML(表示位置)
#FUNCTIONS
#DIMS 表示位置
SELECTCASE 表示位置
	CASE "LEFT", "left", "左"
		LOCALS = <p align='left'>
		RETURNF LOCALS
	CASE "CENTER", "center", "中央"
		LOCALS = <p align='center'>
		RETURNF LOCALS
	CASE "RIGHT", "right", "右"
		LOCALS = <p align='right'>
		RETURNF LOCALS
	CASEELSE
		;認識できなかったら左揃え
		LOCALS = <p align='left'>
		RETURNF LOCALS
ENDSELECT

;********************************************************************************************
;ボタン生成関数
;戻り値としてbuttonタグの文字列を返す
;POSはややこしいので使用しない
;********************************************************************************************
@ボタン生成HTML(VALUE, TITLE)
#FUNCTIONS
#DIMS  VALUE		;ボタンのバリュー
#DIMS  TITLE		;マウスオーバー時に表示する文字列
LOCALS = <button
SIF VALUE != ""
	LOCALS += @" value='%VALUE%'"
SIF TITLE != ""
	LOCALS += @" title='%TITLE%'"
LOCALS += @" >"
RETURNF LOCALS

;********************************************************************************************
;横位置指定関数
;いちいち場合分けするのが嫌なので全てshapeで調節する
;戻り値としてshapeタグの文字列を返す
;横位置はピクセル単位での指定
;********************************************************************************************
@横位置HTML(横位置)
#FUNCTIONS
#DIM 横位置		;ピクセル指定 内部でフォントサイズ基準のパーセンテージに変換する
SIF PPF == 0
	;１ピクセルがフォントサイズの何%であるかを10倍の値で取得する（精度向上のため）
	PPF = PIXEL_PERCENT_OF_FONTSIZE() ;どうせコンフィグ変えたら再起動なのだから、一度だけ計算する

横位置 = 横位置 * PPF / 10
LOCALS = <shape type='space' param='{横位置}'>
RETURNF LOCALS

;********************************************************************************************
;画像合わせ改行関数
;画像に合わせて改行したい場合に使用する
;縦幅をピクセル単位で指定すると、それをぎりぎり内包する行数だけ改行する
;********************************************************************************************
@ピクセル自動改行(縦幅)
#DIM 縦幅
SIF PPF == 0
	;１ピクセルがフォントサイズの何%であるかを10倍の値で取得する（精度向上のため）
	PPF = PIXEL_PERCENT_OF_FONTSIZE() ;どうせコンフィグ変えたら再起動なのだから、一度だけ計算する
IF FLAG:立絵種類
	IF キャラ画像表示サイズ比 <= 50
		LOCAL:1 = 1600
	ELSEIF キャラ画像表示サイズ比 <= 60
		LOCAL:1 = 1500
	ELSEIF キャラ画像表示サイズ比 <= 110
		LOCAL:1 = 1250
	ELSE
		LOCAL:1 = 1200
	ENDIF
	SIF GET_TARGETNUM() < FLAG:画像表示
		PRINTFORML 
ELSE
	IF キャラ画像表示サイズ比 <= 60
		LOCAL:1 = 1250
	ELSEIF キャラ画像表示サイズ比 == 110
		LOCAL:1 = 1200
	ELSE
		LOCAL:1 = 1100
	ENDIF
ENDIF
縦幅 = 縦幅 * PPF / LOCAL:1;何行分の幅かを計算
FOR LOCAL, 0, 縦幅 - 1
	PRINTFORML
NEXT
RETURN 1

;********************************************************************************************
;行ずれを防ぐための措置
;連続でHTML_PRINTを使用すると発生する行ずれのための措置
;********************************************************************************************
@画像描画終了
行ずれ回数 = 0